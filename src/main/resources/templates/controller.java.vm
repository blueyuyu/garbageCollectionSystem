package ${package.Controller};

## 给模板文件导包
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.*;
import javax.annotation.Resource;

##继续导包，模板引擎语法 导报 user 与 其类型
import $!{package.Service}.$!{table.serviceName};
import ${package.Entity}.${entity};

import com.example.garbageCollection.common.Result;
import java.net.URLEncoder;

#if(${restControllerStyle})
import org.springframework.web.bind.annotation.RestController;
#else
import org.springframework.stereotype.Controller;
#end
#if(${superControllerClassPackage})
import ${superControllerClassPackage};
#end

/**
 * <p>
 * $!{table.comment} 前端控制器
 * </p>
 *
 * @author ${author}
 * @since ${date}
 */
#if(${restControllerStyle})
@RestController
#else
@Controller
#end
@RequestMapping("#if(${package.ModuleName})/${package.ModuleName}#end/#if(${controllerMappingHyphenStyle})${controllerMappingHyphen}#else${table.entityPath}#end")
#if(${kotlin})
class ${table.controllerName}#if(${superControllerClass}) : ${superControllerClass}()#end

#else
#if(${superControllerClass})
public class ${table.controllerName} extends ${superControllerClass} {
#else
public class ${table.controllerName} {
#end

##    代码生成器在此处加逻辑
##    他的 table.serviceName 代表引入的对象的类    ${table.entityPath}代表user
    @Resource
    private ${table.serviceName} ${table.entityPath}Service;

    @PostMapping
    public Result save(@RequestBody ${entity} ${table.entityPath}) {
##        新增或者更新
         ${table.entityPath}Service.saveOrUpdate(${table.entityPath});
         return Result.success(null);
    }

    @DeleteMapping("/{id}")
    public Result delete(@PathVariable Integer id) {
##        删除
         ${table.entityPath}Service.removeById(id);
        return Result.success();
    }

    // 使用post删除
    @PostMapping("/del/batch")
    public Result deleteBatch(@RequestBody List<Integer> ids){
         return Result.success(${table.entityPath}Service.removeByIds(ids),"批量删除成功");
    }

    // List<${entity}>
    @GetMapping
    public Result findAll() {
##          查询所有的数据
        ${table.entityPath}Service.list();
        return Result.success();
    }

    //${entity}
    @GetMapping("/{id}")
    public Result findOne(@PathVariable Integer id) {
    ##        根据id 查询
        ${table.entityPath}Service.getById(id);
        return Result.success();
    }

    //Page<${entity}>
    @GetMapping("/page")
    public Result findPage(@RequestParam Integer pageNum,
    @RequestParam Integer pageSize) {
##        分页查询
            QueryWrapper<${entity}> queryWrapper = new QueryWrapper<>();
            queryWrapper.orderByDesc("id");
            ${table.entityPath}Service.page(new Page<>(pageNum, pageSize));
            return Result.success();
        }


    //    excell 导出接口
    @GetMapping("/export")
    public void export(HttpServletResponse response) throws Exception {
            // 查出所有的数据
            List<${entity}> list = ${table.entityPath}Service.list();
            // 通过工具类创建writer，默认创建xls格式
            ExcelWriter writer = ExcelUtil.getWriter(true);
    //创建xlsx格式的
    //ExcelWriter writer = ExcelUtil.getWriter(true);
##            writer.addHeaderAlias("id", "id");
##            writer.addHeaderAlias("username", "用户名");
##            writer.addHeaderAlias("password", "密码");
##            writer.addHeaderAlias("nickname", "昵称");
##            writer.addHeaderAlias("email", "邮箱");
##            writer.addHeaderAlias("phone", "电话");
##            writer.addHeaderAlias("address", "地址");
##            writer.addHeaderAlias("createTime", "创建时间");
##            writer.addHeaderAlias("avatarUrl", "头像");
##            writer.addHeaderAlias("role", "权限");

    // 一次性写出内容，使用默认样式，强制输出标题
            writer.write(list,true);

    //        设置浏览器响应的格式
            response.setContentType("application/vnd.openxmlformats-officedocument.spreadsheetml.sheet;charset=utf-8");
            String fileName = URLEncoder.encode("垃圾分类信息","UTF-8");
            response.setHeader("Content-Disposition","attachment;filename="+fileName+".xlsx");
            ServletOutputStream out=response.getOutputStream();
    //out为OutputStream，需要写出到的目标流
            writer.flush(out,true);
    // 关闭writer，释放内存
            out.close();
            writer.close();
            //
            }
    }

#end